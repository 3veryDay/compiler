%{
#include <stdio.h>
#include <ctype.h>
#include <malloc.h>

/*yacc source for Mini C*/
void semantic(int);
%}

%nonassoc tlowerthanelse
%nonassoc telse

%token tident tnumber tconst telse tif tint treturn tvoid twhile
%token taddAssign tsubAssign tmulAssign tdivAssign tmodAssign
%token tor tand tequal tnotequ tgreate tlesse tinc tdec


%%
mini_c 			: translation_unit				{};
translation_unit 		: external_dcl				{}
			| translation_unit external_dcl			{};
external_dcl 		: function_def				{}
		  	| declaration				{};
function_def 		: function_header compound_st		{};
function_header 		: dcl_spec function_name formal_param	{};
dcl_spec 			: dcl_specifiers				{};
dcl_specifiers 		: dcl_specifier				{}
		 	| dcl_specifiers dcl_specifier			{};
dcl_specifier 		: type_qualifier				{};
			| type_specifier				{};
type_qualifier 		: tconst					{};
type_specifier 		: tint					{}
		 	| tvoid					{};
function_name 		: tident					{};
formal_param 		: '(' opt_formal_param ')' 			{};
opt_formal_param 		: formal_param_list			{};
		   	|					{};
formal_param_list 		: param_dcl				{}
		    	| formal_param_list ',' param_dcl 		{};
param_dcl 		: dcl_spec declarator			{};
compound_st 		: '{' opt_dcl_list opt_stat_list '}' 		{};
opt_dcl_list 		: declaration_list			{};
			|					{};
declaration_list 		: declaration				{}
			| declaration_list declaration 			{};
declaration 		: dcl_spec init_dcl_list ';'			{};
init_dcl_list 		: init_declarator				{}
			| init_dcl_list ',' init_declarator 		{};
init_declarator 		: declarator				{}
		 	| declarator '=' tnumber			{};
declarator 		: tident					{}
	     		| tident '[' opt_number ']'			{};
opt_number 		: tnumber				{}
	     		|					{};
opt_stat_list 		: statement_list				{}
		 	|					{};
statement_list 		: statement				{}
		 	| statement_list statement 			{};
statement 		: compound_st				{}
	   		| expression_st				{}
	   		| if_st					{}
	   		| while_st					{}
	   		| return_st				{}
			;
expression_st 		: opt_expression ';'				{};
opt_expression 		: expression				{}
		 	|					{};
%{
#include <stdio.h>
#include <ctype.h>
#include <malloc.h>

/*yacc source for Mini C*/
void semantic(int);
%}

%nonassoc tlowerthanelse
%nonassoc telse

%token tident tnumber tconst telse tif tint treturn tvoid twhile
%token taddAssign tsubAssign tmulAssign tdivAssign tmodAssign
%token tor tand tequal tnotequ tgreate tlesse tinc tdec


%%
mini_c 			: translation_unit				{};
translation_unit 		: external_dcl				{}
			| translation_unit external_dcl			{};
external_dcl 		: function_def				{}
		  	| declaration				{};
function_def 		: function_header compound_st		{};
function_header 		: dcl_spec function_name formal_param	{};
dcl_spec 			: dcl_specifiers				{};
dcl_specifiers 		: dcl_specifier				{}
		 	| dcl_specifiers dcl_specifier			{};
dcl_specifier 		: type_qualifier				{};
			| type_specifier				{};
type_qualifier 		: tconst					{};
type_specifier 		: tint					{}
		 	| tvoid					{};
function_name 		: tident					{};
formal_param 		: '(' opt_formal_param ')' 			{};
opt_formal_param 		: formal_param_list			{};
		   	|					{};
formal_param_list 		: param_dcl				{}
		    	| formal_param_list ',' param_dcl 		{};
param_dcl 		: dcl_spec declarator			{};
compound_st 		: '{' opt_dcl_list opt_stat_list '}' 		{};
opt_dcl_list 		: declaration_list			{};
			|					{};
declaration_list 		: declaration				{}
			| declaration_list declaration 			{};
declaration 		: dcl_spec init_dcl_list ';'			{};
init_dcl_list 		: init_declarator				{}
			| init_dcl_list ',' init_declarator 		{};
init_declarator 		: declarator				{}
		 	| declarator '=' tnumber			{};
declarator 		: tident					{}
	     		| tident '[' opt_number ']'			{};
opt_number 		: tnumber				{}
	     		|					{};
opt_stat_list 		: statement_list				{}
		 	|					{};
statement_list 		: statement				{}
		 	| statement_list statement 			{};
statement 		: compound_st				{}
	   		| expression_st				{}
	   		| if_st					{}
	   		| while_st					{}
	   		| return_st				{}
			;
expression_st 		: opt_expression ';'				{};
opt_expression 		: expression				{}
		 	|					{};
if_st 			: tif '(' expression ')' statement %prec tlowerthanelse		{};
			| tif '(' expression ')' statement telse statement 	{};
while_st 			: twhile '(' expression ')' statement 		{};
return_st 			: treturn opt_expression ';'			{};
expression 		: assignment_exp				{};
assignment_exp 		: logical_or_exp				{}
			| unary_exp '=' assignment_exp 		{}
			| unary_exp taddAssign assignment_exp 	{}
			| unary_exp tsubAssign assignment_exp 	{}
			| unary_exp tmulAssign assignment_exp 	{}
			| unary_exp tdivAssign assignment_exp 	{}
			| unary_exp tmodAssign assignment_exp 	{};
logical_or_exp 		: logical_and_exp				{};
			| logical_or_exp tor logical_and_exp 		{};
logical_and_exp 		: equality_exp				{};
		 	| logical_and_exp tand equality_exp 		{};
equality_exp 		: relational_exp				{};
			| equality_exp tequal relational_exp 		{};
			| equality_exp tnotequ relational_exp 		{};
relational_exp 		: additive_exp 				{};
			| relational_exp '>' additive_exp 		{};
			| relational_exp '<' additive_exp 		{};
			| relational_exp tgreate additive_exp 		{};
			| relational_exp tlesse additive_exp 		{};
additive_exp 		: multiplicative_exp				{};
			| additive_exp '+' multiplicative_exp 		{};
			| additive_exp '-' multiplicative_exp 		{};
multiplicative_exp 		: unary_exp				{};
		    	| multiplicative_exp '*' unary_exp 		{};
		    	| multiplicative_exp '/' unary_exp 		{};
		    	| multiplicative_exp '%' unary_exp 		{};
unary_exp 		: postfix_exp				{};
	   		| '-' unary_exp				{};
	   		| '!' unary_exp				{};
	   		| tinc unary_exp				{};
	   		| tdec unary_exp				{};
postfix_exp 		: primary_exp				{};
	      		| postfix_exp '[' expression ']' 		{};
	      		| postfix_exp '(' opt_actual_param ')' 		{};
	      		| postfix_exp tinc				{};
	      		| postfix_exp tdec				{};
opt_actual_param 		: actual_param				{};
		  	|					{};
actual_param 		: actual_param_list				{};
actual_param_list 		: assignment_exp				{};
		   	| actual_param_list ',' assignment_exp 		{};
primary_exp 		: tident					{};
	     		| tnumber				{};
	     		| '(' expression ')'				{};
%%
