%{
#include <stdio.h>
#include <ctype.h>
#include <malloc.h>

/*yacc source for Mini C*/
void semantic(int);
%}

%nonassoc tlowerthanelse
%nonassoc telse

%token tident tnumber tconst telse tif tint treturn tvoid twhile
%token taddAssign tsubAssign tmulAssign tdivAssign tmodAssign
%token tor tand tequal tnotequ tgreate tlesse tinc tdec


%%
mini_c 			: translation_unit				{};
translation_unit 		: external_dcl				{}
			| translation_unit external_dcl			{};
external_dcl 		: function_def				{}
		  	| declaration				{};
function_def 		: function_header compound_st		{};
function_header 		: dcl_spec function_name formal_param	{};
dcl_spec 			: dcl_specifiers				{};
dcl_specifiers 		: dcl_specifier				{}
		 	| dcl_specifiers dcl_specifier			{};
dcl_specifier 		: type_qualifier				{};
			| type_specifier				{};
type_qualifier 		: tconst					{};
type_specifier 		: tint					{}
		 	| tvoid					{};
function_name 		: tident					{};
formal_param 		: '(' opt_formal_param ')' 			{};
opt_formal_param 		: formal_param_list			{};
		   	|					{};
formal_param_list 		: param_dcl				{}
		    	| formal_param_list ',' param_dcl 		{};
param_dcl 		: dcl_spec declarator			{};
compound_st 		: '{' opt_dcl_list opt_stat_list '}' 		{};
opt_dcl_list 		: declaration_list			{};
			|					{semantic(25);};
declaration_list 		: declaration				{}
			| declaration_list declaration 			{};
declaration 		: dcl_spec init_dcl_list ';'			{};
init_dcl_list 		: init_declarator				{}
			| init_dcl_list ',' init_declarator 		{};
init_declarator 		: declarator				{}
		 	| declarator '=' tnumber			{semantic(32);};
declarator 		: tident					{semantic(33);}
	     		| tident '[' opt_number ']'			{semantic(34);};
opt_number 		: tnumber				{semantic(35);}
	     		|					{semantic(36);};
opt_stat_list 		: statement_list				{semantic(37);}
		 	|					{semantic(38);};
statement_list 		: statement				{semantic(39);}
		 	| statement_list statement 			{semantic(40);};
statement 		: compound_st				{semantic(41);}
	   		| expression_st				{semantic(42);}
	   		| if_st					{semantic(43);}
	   		| while_st					{semantic(44);}
	   		| return_st				{semantic(45);}
			;
expression_st 		: opt_expression ';'				{semantic(46);};
opt_expression 		: expression				{semantic(47);}
		 	|					{semantic(48);};
if_st 			: tif '(' expression ')' statement %prec tlowerthanelse		{semantic(49);}
			| tif '(' expression ')' statement telse statement 	{semantic(50);};
while_st 			: twhile '(' expression ')' statement 		{semantic(51);};
return_st 			: treturn opt_expression ';'			{semantic(52);};
expression 		: assignment_exp				{semantic(53);};
assignment_exp 		: logical_or_exp				{semantic(54);}
			| unary_exp '=' assignment_exp 		{semantic(55);}
			| unary_exp taddAssign assignment_exp 	{semantic(56);}
			| unary_exp tsubAssign assignment_exp 	{semantic(57);}
			| unary_exp tmulAssign assignment_exp 	{semantic(58);}
			| unary_exp tdivAssign assignment_exp 	{semantic(59);}
			| unary_exp tmodAssign assignment_exp 	{semantic(60);}
			;
logical_or_exp 		: logical_and_exp				{semantic(61);}
			| logical_or_exp tor logical_and_exp 		{semantic(62);};
logical_and_exp 		: equality_exp				{semantic(63);}
		 	| logical_and_exp tand equality_exp 		{semantic(64);};
equality_exp 		: relational_exp				{semantic(65);}
			| equality_exp tequal relational_exp 		{semantic(66);}
			| equality_exp tnotequ relational_exp 		{semantic(67);};
relational_exp 		: additive_exp 				{semantic(68);}
			| relational_exp '>' additive_exp 		{semantic(69);}
			| relational_exp '<' additive_exp 		{semantic(70);}
			| relational_exp tgreate additive_exp 		{semantic(71);}
			| relational_exp tlesse additive_exp 		{semantic(72);};
additive_exp 		: multiplicative_exp				{semantic(73);}
			| additive_exp '+' multiplicative_exp 		{semantic(74);}
			| additive_exp '-' multiplicative_exp 		{semantic(75);};
multiplicative_exp 		: unary_exp				{semantic(76);}
		    	| multiplicative_exp '*' unary_exp 		{semantic(77);}
		    	| multiplicative_exp '/' unary_exp 		{semantic(78);}
		    	| multiplicative_exp '%' unary_exp 		{semantic(79);};
unary_exp 		: postfix_exp				{semantic(80);}
	   		| '-' unary_exp				{semantic(81);}
	   		| '!' unary_exp				{semantic(82);}
	   		| tinc unary_exp				{semantic(83);}
	   		| tdec unary_exp				{semantic(84);};
postfix_exp 		: primary_exp				{semantic(85);}
	      		| postfix_exp '[' expression ']' 		{semantic(86);}
	      		| postfix_exp '(' opt_actual_param ')' 		{semantic(87);}
	      		| postfix_exp tinc				{semantic(88);}
	      		| postfix_exp tdec				{semantic(89);};
opt_actual_param 		: actual_param				{semantic(90);}
		  	|					{semantic(91);};
actual_param 		: actual_param_list				{semantic(92);};
actual_param_list 		: assignment_exp				{semantic(93);}
		   	| actual_param_list ',' assignment_exp 		{semantic(94);};
primary_exp 		: tident					{semantic(95);}
	     		| tnumber				{semantic(96);}
	     		| '(' expression ')'				{semantic(97);};
%%

void semantic(int n)
{	
	printf("reduced rule number = %d\n",n);
}
